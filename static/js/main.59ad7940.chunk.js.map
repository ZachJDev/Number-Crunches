{"version":3,"sources":["Components/RadioGroup.js","Components/CheckboxGroup.js","Components/Modes.js","Components/Options.js","Components/GameOverMessage.js","Components/Problem.js","Components/ProblemList.js","Components/Input.js","Components/Timer.js","Components/GameArea.js","Components/Video.js","Components/MathTrainer.js","Components/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["RadioGroup","handleChange","e","props","this","radios","map","r","key","id","className","radioClass","onChange","type","name","value","checked","disabled","htmlFor","Component","CheckboxGroup","event","target","boxes","boxVal","includes","enabledList","getRandom","array","Math","floor","random","length","BASE_RULES","max","min","startTime","totalProblems","practice","hasNumProbs","hasStartClock","allowedSigns","GameMode","params","Object","assign","hasTimer","bonus","ticks","clockDirection","hasSkip","challengeIncrease","Number","hasScore","n1","n2","s","sign","signs","getNewNumbers","getRandomInt","timeTaken","problem","num1","num2","signCheck","signBonus","score","difficulty","log","options","mode","Normal","Blitz","Zen","MultiplicationTables","hasPractice","description","initGame","table","i","j","push","nums","inOrder","filter","tuples","probNum","toString","problemCount","Rules","keys","Modes","forEach","getDefaultRules","Options","handleCanStart","state","handleSubmit","preventDefault","canStart","setState","handleOptions","handleCheckboxChange","values","practiceEnable","numProbsEnable","startClockEnable","chooseSignsEnable","rangeWarning","signWarning","warningSpan","buttonClasses","onSubmit","GameOverMessage","handleRestart","restart","timeMessage","solved","timeElapsed","message","goal","mins","secs","onClick","Problem","children","ProblemList","problems","p","Input","handleInput","handleUpdateProblem","isGameOver","updateProblem","input","autoFocus","Timer","time","GameArea","val","goToOptions","timerMessage","answer","timeLeft","goHome","Video","src","url","frameBorder","allow","allowFullScreen","title","MathTrainer","wasSkipped","Game","getNewProblem","h","compute","computeScore","Date","now","lastAnswerTime","isFinished","endGame","increaseChallenge","clearInterval","timerTimeLeft","timerTimeTaken","tickTimer","setInterval","history","location","newGame","PRE_GAME_TIME","preGameTime","timerPreGame","BasicTrainer","Fragment","path","exact","render","routeProps","to","App","routerProps","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.59ad7940.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class RadioGroup extends Component {\r\n\r\n    handleChange = (e) => {\r\n        this.props.handleChange(e)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.radios.map(r => {\r\n                return (<div key={r.id} className={this.props.radioClass}>\r\n                <input onChange={this.handleChange} type=\"radio\" name={this.props.name} value={r.id} id={r.id}\r\n                           checked={r.id === this.props.checked} disabled={this.props.disabled}/>\r\n                    <label htmlFor={r.id}>{r.id}</label>\r\n                </div>)\r\n            })\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class CheckboxGroup extends Component {\r\n\r\n    handleChange = (event) => {\r\n        this.props.handleChange(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.boxes.map(boxVal => {\r\n                    return <div key={boxVal}>\r\n                        <input type=\"checkbox\" id={boxVal} name={boxVal} value={boxVal} onChange={this.handleChange}\r\n                               checked={this.props.checked.includes(boxVal)}\r\n                               disabled={!this.props.enabledList.includes(boxVal)}/>\r\n                        <label htmlFor={boxVal}>{boxVal}</label>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}","const getRandom = function (array) {\r\n  const num = Math.floor(Math.random() * array.length);\r\n  return array[num];\r\n};\r\n\r\nclass BASE_RULES {\r\n  constructor() {\r\n    this.max = 10;\r\n    this.min = 1;\r\n    this.startTime = 10;\r\n    this.totalProblems = 50;\r\n    this.practice = false;\r\n    this.hasNumProbs = false;\r\n    this.hasStartClock = false;\r\n    this.allowedSigns = [\"+\", \"-\", \"×\", \"/\"];\r\n  }\r\n}\r\n\r\nclass GameMode {\r\n  constructor(params) {\r\n    Object.assign(this, params);\r\n    this.hasTimer = !this.practice;\r\n    this.bonus = 2;\r\n    this.ticks = true;\r\n    this.clockDirection = 1;\r\n    this.hasSkip = true;\r\n    this.challengeIncrease = 0;\r\n    this.max = Number(this.max);\r\n    this.min = Number(this.min);\r\n    this.hasScore = true;\r\n  }\r\n\r\n  compute(n1, n2, s) {\r\n    if (s === \"×\") return n1 * n2;\r\n    if (s === \"+\") return n1 + n2;\r\n    if (s === \"-\") return n1 - n2;\r\n    if (s === \"/\") return n1 / n2;\r\n  }\r\n\r\n  getRandomInt() {\r\n    // if(this.max == this.min) return Number(this.min)\r\n    // This returns 0 if min and max are the same...\r\n    return Math.floor(Math.random() * (this.max - this.min + 1) + this.min);\r\n  }\r\n\r\n  getNewProblem() {\r\n    let n1, n2;\r\n    const sign = getRandom(this.signs);\r\n    do {\r\n      [n1, n2] = this.getNewNumbers();\r\n    } while (sign === \"/\" && n2 === 0); // Avoid 0 in the denominator\r\n    return [n1, n2, sign];\r\n  }\r\n\r\n  getNewNumbers() {\r\n    return [this.getRandomInt(), this.getRandomInt()];\r\n  }\r\n\r\n  isFinished() {\r\n    return false;\r\n  }\r\n\r\n  increaseChallenge() {\r\n    this.max += this.challengeIncrease;\r\n  }\r\n\r\n  computeScore({ timeTaken, problem }) {\r\n    const getBonus = (signCheck) => {\r\n      if (signCheck === \"/\") return 0.5;\r\n      if (signCheck === \"*\") return 0.3;\r\n      return 0;\r\n    };\r\n    const BASE_SCORE = 10;\r\n    const BASE_DIFFICULTY = 0.5;\r\n\r\n    let { num1, num2, sign } = problem;\r\n    if (sign === \"\") {\r\n      return 0;\r\n    }\r\n    let signBonus = getBonus(sign);\r\n    let score = BASE_SCORE / ((timeTaken / 1000) * 2); // base score divided by 2 for each second taken.\r\n    if (num1 === 0 || num2 === 0) return score * BASE_DIFFICULTY;\r\n    let difficulty = BASE_DIFFICULTY + (Math.log(num1) + Math.log(num2));\r\n\r\n    return Math.floor(score * (difficulty + signBonus));\r\n  }\r\n\r\n  static newGame(options) {\r\n    switch (options.mode) {\r\n      case \"Normal\":\r\n        return new Normal(options);\r\n      case \"Blitz\":\r\n        return new Blitz(options);\r\n      case \"Zen\":\r\n        return new Zen(options);\r\n      case \"Multiplication Tables\":\r\n        return new MultiplicationTables(options);\r\n      default:\r\n        return new Normal(options);\r\n    }\r\n  }\r\n}\r\n\r\nclass Normal extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.challengeIncrease = 5;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Normal\",\r\n      hasPractice: true,\r\n      description:\r\n        \"Every correct answer adds more time to the clock, but be careful! The problems get harder the longer you  last.\",\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass MultiplicationTables extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.initGame();\r\n    this.clockDirection = 1;\r\n    this.hasSkip = false;\r\n  }\r\n\r\n  initGame() {\r\n    this.table = [];\r\n    this.problem = 0;\r\n    for (let i = this.min; i <= this.max; i++) {\r\n      for (let j = this.min; j <= this.max; j++) {\r\n        this.table.push([i, j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  getNewNumbers() {\r\n    let nums;\r\n    if (this.inOrder) {\r\n      nums = this.table[0];\r\n    } else {\r\n      nums = getRandom(this.table);\r\n    }\r\n    this.table = this.table.filter((tuples) => {\r\n      return tuples !== nums;\r\n    });\r\n    return nums;\r\n  }\r\n\r\n  isFinished() {\r\n    if (this.problem === this.table.length) {\r\n      this.initGame();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Multiplication Tables\",\r\n      ticks: true,\r\n      hasPractice: true,\r\n      description:\r\n        \"Like Normal mode, but let's you focus just on multiplication tables.\",\r\n      allowedSigns: [\"×\"],\r\n      hasStartClock: true,\r\n    });\r\n  }\r\n}\r\n\r\nclass Zen extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.hasTimer = false;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Zen\",\r\n      description: \"Chill out with some music and endless math problems.\",\r\n    });\r\n  }\r\n}\r\n\r\nclass Blitz extends GameMode {\r\n  constructor(params) {\r\n    super(params);\r\n    this.clockDirection = -1;\r\n    this.startTime = 0;\r\n    this.bonus = 0;\r\n  }\r\n\r\n  // I don't like this being a method. I need to figure a way to keep the game logic separate from the game rules\r\n  isFinished(probNum) {\r\n    return probNum.toString() === this.totalProblems;\r\n  }\r\n\r\n  static getDefaultRules() {\r\n    return Object.assign(new BASE_RULES(), {\r\n      id: \"Blitz\",\r\n      problemCount: true,\r\n      description: \"Solve a set number of problems as fast as you can!\",\r\n      hasNumProbs: true,\r\n    });\r\n  }\r\n}\r\n\r\nexport default GameMode;\r\nexport {Normal, MultiplicationTables, Blitz, Zen};\r\n","import React, {Component} from \"react\";\r\nimport RadioGroup from \"./RadioGroup\";\r\nimport CheckboxGroup from \"./CheckboxGroup\";\r\nimport * as Modes from \"./Modes\";\r\n\r\nimport \"./Options.css\";\r\n\r\nlet Rules = {};\r\n\r\nObject.keys(Modes).forEach((mode) => {\r\n    if (!!Modes[mode].getDefaultRules) {\r\n        // This stops the abstract GameMode class from being added to the list\r\n        let r = Modes[mode].getDefaultRules();\r\n        Rules[r.id] = r;\r\n    }\r\n});\r\n\r\nexport default class Options extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {mode: \"Normal\", signs: [\"+\", \"-\"], canStart: true};\r\n        Object.assign(this.state, Rules[\"Normal\"]);\r\n        this.radios = [...Object.values(Rules)];\r\n    }\r\n\r\n    handleCanStart = (state) => {\r\n        return Number(state.min) <= Number(state.max) && state.signs.length > 0\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.state.canStart) {\r\n            this.setState({id: this.state.mode});\r\n            this.props.handleOptions(this.state);\r\n        }\r\n    };\r\n    handleChange = (event) => {\r\n        if (event.target.name === \"practice\") {\r\n            let practice = this.state.practice;\r\n            this.setState({[event.target.name]: !practice});\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value});\r\n            this.setState(state => {\r\n                return {canStart: this.handleCanStart(state)}\r\n            })\r\n        }\r\n\r\n        if (event.target.value === \"Multiplication Tables\") {\r\n            this.setState({signs: [\"×\"]});\r\n        }\r\n    };\r\n    handleCheckboxChange = (value) => {\r\n        let signs = this.state.signs;\r\n        if (signs.includes(value)) signs = signs.filter((s) => s !== value);\r\n        else signs.push(value);\r\n        this.setState({signs}, () => {\r\n            this.setState((state) => {\r\n                return {canStart: this.handleCanStart(state)}\r\n            })\r\n        })\r\n    };\r\n\r\n    render() {\r\n        // This could have been ternary'd below, but it's already so cluttered, I wanted to put these all up here.\r\n        let practiceEnable = Rules[this.state.mode].hasPractice ? \"\" : \"disabled\";\r\n        let numProbsEnable = Rules[this.state.mode].hasNumProbs ? \"\" : \"disabled\";\r\n        let startClockEnable = Rules[this.state.mode].hasStartClock ? '' : 'disabled'\r\n        let chooseSignsEnable = Rules[this.state.mode].allowedSigns.length > 1 ? '' : 'disabled'\r\n\r\n        let rangeWarning = Number(this.state.min) > Number(this.state.max) ?\r\n            <p>Min must not be higher than max.</p> : '';\r\n        let signWarning = this.state.signs.length === 0 ?\r\n            <p>Must have a sign selected.</p> : '';\r\n        let warningSpan = <div className=\"warning\">{rangeWarning} {signWarning}</div>\r\n\r\n\r\n        let buttonClasses = \"button start-button \" + (!this.state.canStart ? 'disabled' : '');\r\n\r\n        return (\r\n            <div className=\"options\">\r\n                <form onSubmit={this.handleSubmit} className=\"options-form\">\r\n                    <div className=\"mode-select\">\r\n                        <RadioGroup\r\n                            name=\"mode\"\r\n                            radios={this.radios}\r\n                            handleChange={this.handleChange}\r\n                            checked={this.state.mode}\r\n                            radioClass={\"mode\"}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"mode-options\">\r\n                        <div className=\"mode-info\">\r\n                            <h1 className=\"mode-title\">{this.state.mode}</h1>\r\n                            <div className=\"mode-desc-box\">\r\n                                <p className=\"mode-desc\">{Rules[this.state.mode].description}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"mode-options-body\">\r\n                            <div className=\"mode-options-col\">\r\n                                <div className=\"mode-max-min\">\r\n                                    <div className=\"mode-max\">\r\n                                        <h2 id=\"range\" className={`form-area-label`}>Range </h2>\r\n                                        <label htmlFor=\"max\">Max:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            name=\"max\"\r\n                                            value={this.state.max}\r\n                                            onChange={this.handleChange}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"mode-min\">\r\n                                        <label htmlFor=\"min\">Min:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            name=\"min\"\r\n                                            value={this.state.min}\r\n                                            onChange={this.handleChange}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mode-signs\">\r\n                                    <h2 className={`${chooseSignsEnable} form-area-label`}>Choose Signs</h2>\r\n                                    <CheckboxGroup\r\n                                        boxes={[\"+\", \"-\", \"×\", \"/\"]}\r\n                                        checked={this.state.signs}\r\n                                        handleChange={this.handleCheckboxChange}\r\n                                        enabledList={Rules[this.state.mode].allowedSigns}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <h2 className={`${numProbsEnable} form-area-label`}>Number of Problems</h2>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        name=\"totalProblems\"\r\n                                        min={1}\r\n                                        value={this.state.totalProblems}\r\n                                        onChange={this.handleChange}\r\n                                        disabled={!Rules[this.state.mode].hasNumProbs}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <h2 className={`${practiceEnable} form-area-label`}>Practice Mode</h2>\r\n                                    <RadioGroup\r\n                                        handleChange={this.handleChange}\r\n                                        name=\"practice\"\r\n                                        radios={[{id: \"On\"}, {id: \"Off\"}]}\r\n                                        checked={this.state.practice === true ? \"On\" : \"Off\"}\r\n                                        disabled={!Rules[this.state.mode].hasPractice}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <h2 className={`${startClockEnable} form-area-label`}>Seconds on Clock</h2>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={this.state.startTime}\r\n                                        name=\"startTime\"\r\n                                        min={2}\r\n                                        onChange={this.handleChange}\r\n                                        disabled={!Rules[this.state.mode].hasStartClock}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"start-warning\">\r\n                            <input className={buttonClasses} type=\"submit\" value=\"Start\"/>\r\n                            {warningSpan}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nclass GameOverMessage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleRestart = () => {\r\n        this.props.restart();\r\n    };\r\n\r\n    render() {\r\n        let {solved, timeElapsed, goal} = this.props;\r\n        let message = solved >= goal ? \"Great Job!\" : \"Keep trying!\";\r\n\r\n        let timeMessage;\r\n        if (timeElapsed >= 60) {\r\n            let mins = Math.floor(timeElapsed / 60);\r\n            let secs = timeElapsed % 60;\r\n            timeMessage = `${mins} minute${mins > 1 ? \"s\" : \"\"}${\r\n                secs > 0 ? ` and ${secs} second${secs > 1 ? \"s\" : \"\"}` : \"\"\r\n            }`;\r\n        } else timeMessage = `${timeElapsed} seconds`;\r\n        return (\r\n            <div>\r\n                <h1>{`You solved ${solved} problems in ${timeMessage} and scored ${this.props.score} points!`}</h1>\r\n\r\n                <h2>{message}</h2>\r\n                <button className=\"button\" onClick={this.handleRestart}>Try again?</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameOverMessage;\r\n","import React, {Component} from \"react\";\r\n\r\nimport './Problem.css'\r\n\r\nexport default class Problem extends Component {\r\n\r\n    render() {\r\n        let {num1, num2, sign, mode} = this.props\r\n        return (\r\n            <div className={` ${mode} problem-wrap`}>\r\n                <div className={` problem`}>\r\n        <span>\r\n        {num1} {sign} {num2} = \r\n        </span>\r\n                </div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nexport default class ProblemList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"problem-list\">\r\n                {this.props.problems.map((p, i) => {\r\n                    return (\r\n                        // I know indexes aren't great for keys, but I think in this case, where the list won't change, it's probably not a problem.\r\n                        //(Famous last words...)\r\n                        <span className={`${this.props.mode} problem`} key={i}>\r\n                    {p}\r\n                  </span>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nimport './Input.css'\r\n\r\nexport default class Input extends Component {\r\n\r\n    handleInput = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleInput(event.target.value)\r\n    }\r\n    handleUpdateProblem = () => {\r\n        if (this.props.isGameOver) {\r\n            this.props.handleRestart();\r\n        } else\r\n            this.props.updateProblem(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input\">\r\n                <input\r\n                    className=\"answer\"\r\n                    type=\"text\"\r\n                    onChange={this.handleInput}\r\n                    value={this.props.input}\r\n                    autoFocus\r\n                />\r\n                {this.props.hasSkip ?\r\n                    <button className=\"skip-button button\"\r\n                            onClick={this.handleUpdateProblem}>{this.props.isGameOver ? 'restart' : 'skip'}</button>\r\n                    : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\n\r\n\r\nexport default class Timer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>\r\n                    {this.props.time}\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport GameOverMessage from './GameOverMessage'\r\nimport Problem from './Problem'\r\nimport ProblemList from './ProblemList'\r\nimport Input from './Input'\r\nimport Timer from './Timer'\r\n\r\nexport default class GameArea extends Component {\r\n    handleInput = (val) => {\r\n        this.props.handleInput(val)\r\n    }\r\n    updateProblem =() => {\r\n        this.props.updateProblem(true)\r\n    }\r\n    handleRestart = () => {\r\n        this.props.restart()\r\n    }\r\n\r\n    goToOptions = () => {\r\n        this.props.handleOptions()\r\n    }\r\n    render() {\r\n        const {num1, num2, answer, sign} = this.props.problem\r\n        const {input, mode, isGameOver, timeLeft, timeTaken, problems, hasSkip, practice} = this.props\r\n    let timerMessage;\r\n    // I'm not a fan of this nested statement... \r\n    if(mode !== 'Zen' && !practice) {\r\n      timerMessage = !isGameOver ? (\r\n       <Timer time={timeLeft || timeTaken || 0}/>\r\n      ) : (\r\n        <GameOverMessage\r\n            score={this.props.score || 'blug'}\r\n          solved={problems.length}\r\n          timeElapsed={timeTaken}\r\n          goal={3}\r\n          restart={this.handleRestart}\r\n          goHome={this.handleOptions}\r\n        />\r\n      )\r\n    } else {\r\n        timerMessage = null;\r\n    }\r\n        return (\r\n             <div className=\"game-area\">\r\n            {/* Problem List */}\r\n            {mode === \"Zen\" ?  <ProblemList mode ={mode} problems={problems}/>\r\n             : null}\r\n            {/* Timer / Message */}\r\n            {timerMessage}\r\n            {/* Problem & Input */}\r\n            {timeLeft > 0 || !isGameOver ? (\r\n              <Problem\r\n                mode={mode}\r\n                num1={num1}\r\n                num2={num2}\r\n                answer={answer}\r\n                sign={sign}\r\n                probNum={problems.length + 1}\r\n              >\r\n                <Input\r\n                  handleInput={this.handleInput}\r\n                  updateProblem={this.updateProblem}\r\n                  input={input}\r\n                  restart={this.handleRestart}\r\n                  hasSkip={hasSkip}\r\n                  isGameOver={timeLeft === 0}\r\n                />\r\n              </Problem>\r\n            ) : null}\r\n\r\n            <button\r\n              className=\"button options-button\"\r\n              onClick={this.goToOptions}\r\n            >\r\n              Select a new mode\r\n            </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\n\r\nexport default class Video extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <iframe\r\n                    className={`video ${this.props.mode}`}\r\n                    src={this.props.url}\r\n                    frameBorder=\"0\"\r\n                    allow=\"autoplay; encrypted-media\"\r\n                    allowFullScreen\r\n                    title=\"video\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport GameArea from \"./GameArea\";\r\nimport GameMode from \"./Modes\";\r\nimport Video from \"./Video\";\r\n\r\nimport \"./MathTrainer.css\";\r\nimport \"./Zen.css\";\r\n\r\nconst PRE_GAME_TIME = 3;\r\n\r\nclass MathTrainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // This little hack keeps the trainer working correctly if the page is refreshed.\r\n    const options =\r\n      this.props.options.length > 0\r\n        ? this.props.options\r\n        : this.props.history.location.state.options;\r\n    this.Game = GameMode.newGame(options);\r\n    this.state = {\r\n      score: 0,\r\n      lastAnswerTime: Date.now() + PRE_GAME_TIME * 1000,\r\n      practice: this.Game.practice,\r\n      problem: { num1: 0, num2: 0, sign: \"\" },\r\n      input: \"\",\r\n      timeLeft:\r\n        this.Game.hasTimer || !this.Game.practice || this.Game.startTime,\r\n      isGameOver: true,\r\n      problems: [],\r\n      preGameTime: PRE_GAME_TIME,\r\n    };\r\n  }\r\n\r\n  updateProblem = (wasSkipped) => {\r\n    let [num1, num2, sign] = this.Game.getNewProblem();\r\n    let answer;\r\n    if (sign === \"/\" && num1 !== 0) {\r\n      // Probably can clean this up.\r\n      // This has to be here (and not in the GameMode methods) because it overrides the generated problem.\r\n      let h = num1;\r\n      let num3 = num1 * num2;\r\n      answer = num2;\r\n      num1 = num3;\r\n      num2 = h;\r\n    } else {\r\n      answer = this.Game.compute(num1, num2, sign);\r\n    }\r\n\r\n    if (!wasSkipped) {\r\n      this.setState((s) => ({\r\n        score:\r\n          this.Game.hasScore &&\r\n          s.score +\r\n            (this.Game.computeScore({\r\n              timeTaken: Date.now() - s.lastAnswerTime,\r\n              problem: s.problem,\r\n            }) || 0),\r\n        lastAnswerTime: Date.now(),\r\n        timeLeft: s.timeLeft + this.Game.bonus,\r\n      }));\r\n    }\r\n    this.setState({\r\n      problem: { num1, num2, answer, sign },\r\n      input: \"\",\r\n    });\r\n  };\r\n\r\n  handleInput = (val) => {\r\n    let { num1, num2, sign, answer } = this.state.problem;\r\n    this.setState({ input: val });\r\n    // It's been like a month since I wrote this line, and I can't remember whether I need the double eqs.\r\n    // eslint-disable-next-line\r\n    if (this.state.problem.answer == val) {\r\n      this.setState(\r\n        {\r\n          problems: [\r\n            ...this.state.problems,\r\n            `${num1} ${sign} ${num2} = ${answer}`,\r\n          ],\r\n        },\r\n        () => {\r\n          if (!this.Game.isFinished(this.state.problems.length)) {\r\n            if (this.state.problems.length % 5 === 0) {\r\n              // I may want to abstract the threshold into the Mode classes.\r\n              this.Game.increaseChallenge();\r\n            }\r\n            this.updateProblem();\r\n          } else {\r\n            this.endGame();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  endGame = () => {\r\n    clearInterval(this.state.timerTimeLeft);\r\n    clearInterval(this.state.timerTimeTaken);\r\n    this.setState((s) => ({\r\n      isGameOver: true,\r\n      timeLeft: 0,\r\n      timeTaken: s.timeTaken + 1, // The timeLeft timer doesn't actually count all the way to 0, so this little addition gets the last second.\r\n    }));\r\n  };\r\n  tickTimer = () => {\r\n    // This feels pretty hacky to me, will probably want to clean up later.\r\n    if (this.state.timeLeft > 1) {\r\n      this.setState((s) => ({\r\n        timeLeft: s.timeLeft - 1,\r\n      }));\r\n    } else if (this.state.timeLeft === 1) {\r\n      this.endGame();\r\n    }\r\n  };\r\n\r\n  restart = () => {\r\n    this.updateProblem();\r\n    this.setState({ isGameOver: false, problems: [] });\r\n    if (this.Game.hasTimer) {\r\n      this.setState({\r\n        timeLeft: this.Game.startTime,\r\n        timeTaken: 0,\r\n        timerTimeLeft: setInterval(() => {\r\n          this.tickTimer();\r\n        }, 1000),\r\n        timerTimeTaken: setInterval(() => {\r\n          this.setState((s) => ({\r\n            timeTaken: s.timeTaken + 1,\r\n          }));\r\n        }, 1000),\r\n      });\r\n    }\r\n  };\r\n\r\n  goToOptions = () => {\r\n    this.props.handleRestart();\r\n    this.props.history.push(\"/Math-Trainer/options\", { isGameOver: true });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Goes right into the Game if it's Zen, else starts the pregame timer\r\n    if (this.Game.mode === \"Zen\") {\r\n      this.restart();\r\n    } else {\r\n      this.setState({\r\n        timerPreGame: setInterval(() => {\r\n          this.setState((s) => ({ preGameTime: s.preGameTime - 1 }));\r\n          if (this.state.preGameTime < 1) {\r\n            this.restart();\r\n            clearInterval(this.state.timerPreGame);\r\n          }\r\n        }, 1000),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.timerTimeLeft);\r\n    clearInterval(this.state.timerTimeTaken);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`${this.Game.mode}`}>\r\n        {/* PreGame timer / game area */}\r\n        {this.Game.mode !== \"Zen\" && this.state.preGameTime > 0 ? (\r\n          <h2 className=\"pre-timer\">{this.state.preGameTime}</h2>\r\n        ) : (\r\n          <GameArea\r\n            {...this.state}\r\n            hasSkip={this.Game.hasSkip}\r\n            mode={this.Game.mode}\r\n            updateProblem={this.updateProblem}\r\n            handleInput={this.handleInput}\r\n            handleOptions={this.goToOptions}\r\n            restart={this.restart}\r\n          />\r\n        )}\r\n        {/* Video */}\r\n        {this.Game.mode === \"Zen\" ? (\r\n          <Video\r\n            url={\"https://www.youtube.com/embed/jfKfPfyJRdk?autoplay=1\"}\r\n            mode={this.Game.mode}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MathTrainer;\r\n","import React, {Component} from \"react\";\r\nimport Options from \"./Options\";\r\nimport MathTrainer from \"./MathTrainer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\n\r\nimport './StartPage.css'\r\n\r\nexport default class BasicTrainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isGameOver: true,\r\n            options: {},\r\n        };\r\n    }\r\n\r\n    handleOptions = (options) => {\r\n        this.setState({isGameOver: false, options}, () => {\r\n            this.props.history.push(`/Number-Crunches/${options.mode}`, this.state)\r\n        })\r\n\r\n    };\r\n    handleRestart = () => {\r\n        this.setState({isGameOver: true, options: {}})\r\n    }\r\n\r\n    render() {\r\n        const titleClass = 'title';\r\n        // I don't love this, but  dealing with route params (:gameMode) was a HUGE headache\r\n        // In the future, I'd like to build this from the GameMode object.\r\n        const modePaths = [\"/Number-Crunches/Normal\", \"/Number-Crunches/Zen\", \"/Number-Crunches/Blitz\", \"/Number-Crunches/Multiplication Tables\"]\r\n        return (\r\n            <React.Fragment>\r\n                <div className='title-div'><h1 className={titleClass}>Number Crunches: A Mental Math Workout</h1></div>\r\n                <Switch>\r\n                    <Route path=\"/Number-Crunches/options\" exact\r\n                           render={(routeProps) => <Options {...routeProps} handleOptions={this.handleOptions}/>}/>\r\n                    <Route path={modePaths} exact\r\n                           render={routeProps => <MathTrainer {...routeProps} options={this.state.options}\r\n                                                              handleRestart={this.handleRestart}/>}/>\r\n\r\n                    <Route to=\"\" render={() => <Redirect to=\"/Number-Crunches/options\"/>}/>\r\n                </Switch>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BasicTrainer from './Components/StartPage'\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Route path='/' render={(routerProps) => <BasicTrainer {...routerProps} />}/>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}